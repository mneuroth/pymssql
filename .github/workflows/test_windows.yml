name: Windows

on:
  push:
    branches:
        - '**'
    paths-ignore:
        - docs/**
        - ChangeLog*
    tags:
        - 'v[0-9]+.[0-9]+.[0-9]+'
        - 'v[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
  pull_request:
    branches:
        - '**'
    paths-ignore:
        - docs/**
        - ChangeLog*

jobs:
  create_release:

    name: Prepare release
    runs-on: windows-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
    - name: Checkout code
      if: contains(github.ref, 'release')
      uses: actions/checkout@v2
    - name: Create Release
      if: contains(github.ref, 'release')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      if: contains(github.ref, 'release')
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      if: contains(github.ref, 'release')
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt        
        
  build:

    runs-on: ${{ matrix.os }}
    needs: create_release

    strategy:
      fail-fast: false
      matrix:
            python-version: [3.7]
            os: [windows-latest]
            python-architecture: [x64]
            #python-version: [3.7, 3.8, 3.9]
            #os: [windows-latest]
            #python-architecture: [x86, x64]

    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
            python-version: ${{ matrix.python-version }}
            architecture: ${{ matrix.python-architecture}}

    - name: Install OpenSSL x86
      if: matrix.python-architecture == 'x86'
      run: choco install openssl --forcex86

    - name: Install OpenSSL x64
      if: matrix.python-architecture == 'x64'
      run: choco install openssl

    - name: Install & build dependencies
      run: |
        dir
        choco install gperf
        python -m pip install --upgrade pip
        pip install -r dev/requirements-dev.txt
        python dev/build.py --ws-dir=freetds --dist-dir=dist --sdist --freetds-version="1.3"
        dir dev
        dir dist
        dir build
        dir build\bdist.win-amd64
        dir build\lib.win-amd64-3.7
        dir build\lib.win-amd64-3.7\pymssql
        dir build\temp.win-amd64-3.7
        dir build\temp.win-amd64-3.7\Release
        cd build\lib.win-amd64-3.7\pymssql
        zip pymssql_37_amd64.zip *
        powershell Compress-7Zip "__init__.py" -ArchiveFileName "pymssql_37_amd64.zip" -Format Zip
        powershell Compress-7Zip "_mssql.cp37-win_amd64.pyd" -ArchiveFileName "pymssql_37_amd64.zip" -Format Zip -Append
        powershell Compress-7Zip "_pymssql.cp37-win_amd64.pyd" -ArchiveFileName "pymssql_37_amd64.zip" -Format Zip -Append
        copy pymssql_37_amd64.zip ..\..\..
        cd ..\..\..
        dir
        #dir /s *
        pip install pymssql --no-index -f dist
        python -c "import pymssql; print(pymssql.version_info())"

    - name: Test with pytest
      run: |
        pytest -sv

    # - name: Archive wheels and sdist
      # uses: actions/upload-artifact@v2
      # with:
        # name: pymssql-${{ runner.os }}-${{ matrix.python-architecture }}-${{ github.sha }}
        # path: dist

    # - name: Publish wheels
      # if: github.repository_owner == 'pymssql' && startsWith(github.ref, 'refs/tags/v')
      # run: |
        # pip install twine --upgrade
        # twine upload --skip-existing -u __token__ -p ${{secrets.PYMSSQL_PYPI_TOKEN}} dist/*.whl

    # - name: Publish wheels on test.pypi.org
      # if: github.repository_owner == 'pymssql' && github.ref == 'refs/heads/master'
      # run: |
        # pip install twine --upgrade
        # twine upload --skip-existing -u __token__ -p ${{secrets.PYMSSQL_TEST_PYPI_TOKEN}} --repository-url=https://test.pypi.org/legacy/ dist/*.whl

    - name: Upload zip Release Asset
      if: contains(github.ref, 'release')
      id: upload-zip-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: pymssql_37_amd64.zip
        asset_name: pymssql_37_amd64.zip
        asset_content_type: application/zip